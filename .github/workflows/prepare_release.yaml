name: Generate apt repository for kernel deb
run-name: Generate apt repository for kernel deb
on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  Build:
    name: Prepare Release apt repository and debian based os image
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v3
      - name: Setup package
        run: |
          sudo apt update
          sudo apt install -y reprepro gnupg2 gpg-agent pinentry-curses

          # Clean up apt
          sudo apt autoremove -y
          sudo apt clean -y
          sudo apt autoclean -y

      - name: Setup github config
        run: |
          git config --global user.name "ations-user"
          git config --global user.email "action@github.com"

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Check GPG
        run: |
          echo "test" | gpg --sign --output /dev/null
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Generate APT repo
        run: |
          CODENAME=$(cat conf/distributions | grep Codename | awk '{print $2}')
          COMPONENT=$(cat conf/distributions | grep Components | awk '{print $2}')
          mkdir -p repo/conf
          cp conf/* -t repo/conf/
          #wget -q https://github.com/rcar-community/meta-sparrow-hawk/releases/download/dev-latest/kernel_deb_package.zip
          ./download_deb_package_from_release.sh
          unzip -qo kernel_deb_package.zip
          rm -rf kernel_deb_package/systemd-* # HACK
          reprepro -b repo --component ${COMPONENT} includedeb ${CODENAME} kernel_deb_package/*.deb
          echo "$GPG_PUBLIC_KEY" > repo/kernel-repo.asc
          zip -r repo.zip repo
        env:
          GPG_TTY: $(tty)
          GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Commit and Push branch
        run: |
          BRANCH=apt-repo
          cd repo
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git checkout -b $BRANCH
          git add .
          git commit -m "Update APT repo"
          git push --force origin $BRANCH
          cd $GITHUB_WORKSPACE

      - name: Build debian image
        run: |
          chmod +x ./build_image/*.sh
          ./build_image/build_with_docker_sparrow-hawk.sh

      - name: Generate release message
        run: |
          OUTPUT="${{ github.workspace }}-release_msg.txt"
          cat << 'EOS' > ${OUTPUT}
          ## This is the latest development build.

          This release is generated by using rcar-community/meta-sparrow-hawk deliverables.

          ### How to use PCIe/USB.
          Please copy correct firmware into /usr/lib/firmware/, then reboot.

          **Note:**
          There is no support/help to get the firmware.
          Please do it at your own risk.

          ### Source/License

          kernel: Please check "kernel_deb_package.zip"
          others: Please check deb-src by using apt. Debian default packages are used in this image.

          EOS


      - name: Delete old release/tags if exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="dev-latest"
          # Release
          if gh release view "$TAG_NAME" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "Deleting old release: $TAG_NAME"
            gh release delete "$TAG_NAME" --repo ${{ github.repository }} --yes
          fi
          # Tag
          #if git ls-remote --tags origin | grep "refs/tags/$TAG_NAME$"; then
          #  echo "Deleting old tag: $TAG_NAME"
          #  git push origin :refs/tags/$TAG_NAME
          #fi

      - name: Create or update 'dev-latest' release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: dev-latest
          target_commitish: main
          name: Development Latest
          draft: false
          prerelease: true
          files: |
            ./kernel_deb_package.zip
            ./build_image/*.img.gz
            ./repo.zip
          body_path: ${{ github.workspace }}-release_msg.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

